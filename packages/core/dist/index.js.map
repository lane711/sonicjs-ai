{"version":3,"sources":["../src/app.ts","../src/db/index.ts","../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Main Application Factory\n *\n * Creates a configured SonicJS application with all core functionality\n */\n\nimport { Hono } from 'hono'\nimport type { Context } from 'hono'\nimport type { D1Database, KVNamespace, R2Bucket } from '@cloudflare/workers-types'\nimport {\n  apiRoutes,\n  apiMediaRoutes,\n  apiSystemRoutes,\n  adminApiRoutes,\n  authRoutes,\n  adminContentRoutes,\n  adminUsersRoutes,\n  adminMediaRoutes,\n  adminPluginRoutes,\n  adminLogsRoutes,\n  adminDashboardRoutes,\n  adminCollectionsRoutes,\n  adminSettingsRoutes\n} from './routes'\nimport { getCoreVersion } from './utils/version'\nimport { bootstrapMiddleware } from './middleware/bootstrap'\nimport { metricsMiddleware } from './middleware/metrics'\n\n// ============================================================================\n// Type Definitions\n// ============================================================================\n\nexport interface Bindings {\n  DB: D1Database\n  CACHE_KV: KVNamespace\n  MEDIA_BUCKET: R2Bucket\n  ASSETS: Fetcher\n  EMAIL_QUEUE?: Queue\n  SENDGRID_API_KEY?: string\n  DEFAULT_FROM_EMAIL?: string\n  IMAGES_ACCOUNT_ID?: string\n  IMAGES_API_TOKEN?: string\n  ENVIRONMENT?: string\n  BUCKET_NAME?: string\n}\n\nexport interface Variables {\n  user?: {\n    userId: string\n    email: string\n    role: string\n    exp: number\n    iat: number\n  }\n  requestId?: string\n  startTime?: number\n  appVersion?: string\n}\n\nexport interface SonicJSConfig {\n  // Collections configuration\n  collections?: {\n    directory?: string\n    autoSync?: boolean\n  }\n\n  // Plugins configuration\n  plugins?: {\n    directory?: string\n    autoLoad?: boolean\n  }\n\n  // Custom routes\n  routes?: Array<{\n    path: string\n    handler: Hono\n  }>\n\n  // Custom middleware\n  middleware?: {\n    beforeAuth?: Array<(c: Context, next: () => Promise<void>) => Promise<void>>\n    afterAuth?: Array<(c: Context, next: () => Promise<void>) => Promise<void>>\n  }\n\n  // App metadata\n  version?: string\n  name?: string\n}\n\nexport type SonicJSApp = Hono<{ Bindings: Bindings; Variables: Variables }>\n\n// ============================================================================\n// Application Factory\n// ============================================================================\n\n/**\n * Create a SonicJS application with core functionality\n *\n * @param config - Application configuration\n * @returns Configured Hono application\n *\n * @example\n * ```typescript\n * import { createSonicJSApp } from '@sonicjs/core'\n *\n * const app = createSonicJSApp({\n *   collections: {\n *     directory: './src/collections',\n *     autoSync: true\n *   },\n *   plugins: {\n *     directory: './src/plugins',\n *     autoLoad: true\n *   }\n * })\n *\n * export default app\n * ```\n */\nexport function createSonicJSApp(config: SonicJSConfig = {}): SonicJSApp {\n  const app = new Hono<{ Bindings: Bindings; Variables: Variables }>()\n\n  // Set app metadata\n  const appVersion = config.version || getCoreVersion()\n  const appName = config.name || 'SonicJS AI'\n\n  // App version middleware\n  app.use('*', async (c, next) => {\n    c.set('appVersion', appVersion)\n    await next()\n  })\n\n  // Metrics middleware - track all requests for real-time analytics\n  app.use('*', metricsMiddleware())\n\n  // Bootstrap middleware - runs migrations, syncs collections, and initializes plugins\n  app.use('*', bootstrapMiddleware())\n\n  // Custom middleware - before auth\n  if (config.middleware?.beforeAuth) {\n    for (const middleware of config.middleware.beforeAuth) {\n      app.use('*', middleware)\n    }\n  }\n\n  // Logging middleware\n  app.use('*', async (_c, next) => {\n    // Logging logic here\n    await next()\n  })\n\n  // Security middleware\n  app.use('*', async (_c, next) => {\n    // Security headers, CORS, etc.\n    await next()\n  })\n\n  // Custom middleware - after auth\n  if (config.middleware?.afterAuth) {\n    for (const middleware of config.middleware.afterAuth) {\n      app.use('*', middleware)\n    }\n  }\n\n  // Core routes\n  // Routes are being imported incrementally from routes/*\n  // Each route is tested and migrated one-by-one\n  app.route('/api', apiRoutes)\n  app.route('/api/media', apiMediaRoutes)\n  app.route('/api/system', apiSystemRoutes)\n  app.route('/admin/api', adminApiRoutes)\n  app.route('/admin/dashboard', adminDashboardRoutes)\n  app.route('/admin/collections', adminCollectionsRoutes)\n  app.route('/admin/settings', adminSettingsRoutes)\n  app.route('/admin/content', adminContentRoutes)\n  app.route('/admin/media', adminMediaRoutes)\n  app.route('/admin/plugins', adminPluginRoutes)\n  app.route('/admin/logs', adminLogsRoutes)\n  app.route('/admin', adminUsersRoutes)\n  app.route('/auth', authRoutes)\n\n  // Serve files from R2 storage (public file access)\n  app.get('/files/*', async (c) => {\n    try {\n      // Extract the path from the URL pathname (everything after /files/)\n      const url = new URL(c.req.url)\n      const pathname = url.pathname\n\n      // Remove the /files/ prefix to get the R2 object key\n      const objectKey = pathname.replace(/^\\/files\\//, '')\n\n      if (!objectKey) {\n        return c.notFound()\n      }\n\n      // Get file from R2\n      const object = await c.env.MEDIA_BUCKET.get(objectKey)\n\n      if (!object) {\n        return c.notFound()\n      }\n\n      // Set appropriate headers\n      const headers = new Headers()\n      object.httpMetadata?.contentType && headers.set('Content-Type', object.httpMetadata.contentType)\n      object.httpMetadata?.contentDisposition && headers.set('Content-Disposition', object.httpMetadata.contentDisposition)\n      headers.set('Cache-Control', 'public, max-age=31536000') // 1 year cache\n      headers.set('Access-Control-Allow-Origin', '*') // Allow CORS for media files\n      headers.set('Access-Control-Allow-Methods', 'GET, HEAD, OPTIONS')\n      headers.set('Access-Control-Allow-Headers', 'Content-Type')\n\n      return new Response(object.body as any, {\n        headers\n      })\n    } catch (error) {\n      console.error('Error serving file:', error)\n      return c.notFound()\n    }\n  })\n\n  // Custom routes - User-defined routes\n  if (config.routes) {\n    for (const route of config.routes) {\n      app.route(route.path, route.handler)\n    }\n  }\n\n  // Root redirect to login\n  app.get('/', (c) => {\n    return c.redirect('/auth/login')\n  })\n\n  // Health check\n  app.get('/health', (c) => {\n    return c.json({\n      name: appName,\n      version: appVersion,\n      status: 'running',\n      timestamp: new Date().toISOString()\n    })\n  })\n\n  // 404 handler\n  app.notFound((c) => {\n    return c.json({ error: 'Not Found', status: 404 }, 404)\n  })\n\n  // Error handler\n  app.onError((err, c) => {\n    console.error(err)\n    return c.json({ error: 'Internal Server Error', status: 500 }, 500)\n  })\n\n  return app\n}\n\n/**\n * Setup core middleware (backward compatibility)\n *\n * @param _app - Hono application\n * @deprecated Use createSonicJSApp() instead\n */\nexport function setupCoreMiddleware(_app: SonicJSApp): void {\n  console.warn('setupCoreMiddleware is deprecated. Use createSonicJSApp() instead.')\n  // Backward compatibility implementation\n}\n\n/**\n * Setup core routes (backward compatibility)\n *\n * @param _app - Hono application\n * @deprecated Use createSonicJSApp() instead\n */\nexport function setupCoreRoutes(_app: SonicJSApp): void {\n  console.warn('setupCoreRoutes is deprecated. Use createSonicJSApp() instead.')\n  // Backward compatibility implementation\n}\n","import { drizzle } from 'drizzle-orm/d1';\nimport * as schema from './schema';\n\nexport function createDb(d1: D1Database) {\n  return drizzle(d1, { schema });\n}\n\nexport * from './schema';","/**\n * @sonicjs/core - Main Entry Point\n *\n * Core framework for SonicJS headless CMS\n * Built for Cloudflare's edge platform with TypeScript\n *\n * Phase 2 Migration Status:\n * - Week 1: Types, Utils, Database (COMPLETED ✓)\n * - Week 2: Services, Middleware, Plugins (COMPLETED ✓)\n * - Week 3: Routes, Templates (COMPLETED ✓)\n * - Week 4: Integration & Testing (COMPLETED ✓)\n *\n * Test Coverage:\n * - Utilities: 48 tests (sanitize, query-filter, metrics)\n * - Middleware: 51 tests (auth, logging, security, performance)\n * - Total: 99 tests passing\n */\n\n// ============================================================================\n// Main Application API (Phase 2 Week 1)\n// ============================================================================\n\nexport { createSonicJSApp, setupCoreMiddleware, setupCoreRoutes } from './app'\nexport type { SonicJSConfig, SonicJSApp, Bindings, Variables } from './app'\n\n// ============================================================================\n// Placeholders - To be populated in Phase 2\n// ============================================================================\n\n// Services - Week 2 (COMPLETED)\nexport {\n  // Collection Management\n  loadCollectionConfigs,\n  loadCollectionConfig,\n  getAvailableCollectionNames,\n  validateCollectionConfig,\n  syncCollections,\n  syncCollection,\n  isCollectionManaged,\n  getManagedCollections,\n  cleanupRemovedCollections,\n  fullCollectionSync,\n  // Database Migrations\n  MigrationService,\n  // Logging\n  Logger,\n  getLogger,\n  initLogger,\n  // Plugin Services - Class implementations\n  PluginService as PluginServiceClass,\n  PluginBootstrapService,\n} from './services'\n\nexport type { Migration, MigrationStatus, LogLevel, LogCategory, LogEntry, LogFilter, CorePlugin } from './services'\n\n// Middleware - Week 2 (COMPLETED)\nexport {\n  // Authentication\n  AuthManager,\n  requireAuth,\n  requireRole,\n  optionalAuth,\n  // Logging\n  loggingMiddleware,\n  detailedLoggingMiddleware,\n  securityLoggingMiddleware,\n  performanceLoggingMiddleware,\n  // Performance\n  cacheHeaders,\n  compressionMiddleware,\n  securityHeaders,\n  // Permissions\n  PermissionManager,\n  requirePermission,\n  requireAnyPermission,\n  logActivity,\n  // Plugin middleware\n  requireActivePlugin,\n  requireActivePlugins,\n  getActivePlugins,\n  isPluginActive,\n  // Bootstrap\n  bootstrapMiddleware,\n} from './middleware'\n\nexport type { Permission, UserPermissions } from './middleware'\n\n// Plugins - Week 2 (COMPLETED)\nexport {\n  // Hook System - Class implementations\n  HookSystemImpl,\n  ScopedHookSystem as ScopedHookSystemClass,\n  HookUtils,\n  // Plugin Registry\n  PluginRegistryImpl,\n  // Plugin Manager - Class implementation\n  PluginManager as PluginManagerClass,\n  // Plugin Validator - Class implementation\n  PluginValidator as PluginValidatorClass,\n} from './plugins'\n\n// Routes - Week 3 (COMPLETED)\nexport {\n  ROUTES_INFO,\n  apiRoutes,\n  apiContentCrudRoutes,\n  apiMediaRoutes,\n  apiSystemRoutes,\n  adminApiRoutes,\n  authRoutes,\n  adminContentRoutes,\n  adminUsersRoutes,\n  adminMediaRoutes,\n  adminLogsRoutes,\n  adminPluginRoutes,\n  adminDesignRoutes,\n  adminCheckboxRoutes,\n  adminFAQRoutes,\n  adminTestimonialsRoutes,\n  adminCodeExamplesRoutes,\n  adminDashboardRoutes,\n  adminCollectionsRoutes,\n  adminSettingsRoutes,\n} from './routes'\n\n// Templates - Week 3 (COMPLETED)\nexport {\n  // Form templates\n  renderForm,\n  renderFormField,\n  // Table templates\n  renderTable,\n  // Pagination templates\n  renderPagination,\n  // Alert templates\n  renderAlert,\n  // Confirmation dialog templates\n  renderConfirmationDialog,\n  getConfirmationDialogScript,\n  // Filter bar templates\n  renderFilterBar,\n} from './templates'\n\nexport type {\n  FormField,\n  FormData,\n  TableColumn,\n  TableData,\n  PaginationData,\n  AlertData,\n  ConfirmationDialogOptions,\n  FilterBarData,\n  Filter,\n  FilterOption,\n} from './templates'\n\n// Types - Week 1 (COMPLETED)\nexport type {\n  // Collection types\n  FieldType,\n  FieldConfig,\n  CollectionSchema,\n  CollectionConfig,\n  CollectionConfigModule,\n  CollectionSyncResult,\n  // Plugin types\n  Plugin,\n  PluginContext,\n  PluginConfig,\n  PluginRoutes,\n  PluginMiddleware,\n  PluginModel,\n  PluginService,\n  PluginAdminPage,\n  PluginComponent,\n  PluginMenuItem,\n  PluginHook,\n  HookHandler,\n  HookContext,\n  HookSystem,\n  ScopedHookSystem,\n  PluginRegistry,\n  PluginManager,\n  PluginStatus,\n  AuthService,\n  ContentService,\n  MediaService,\n  PluginLogger,\n  PluginBuilderOptions,\n  PluginValidator,\n  PluginValidationResult,\n  HookName,\n  // Plugin manifest\n  PluginManifest,\n} from './types'\n\nexport { HOOKS } from './types'\n\n// Utils - Week 1 (COMPLETED)\nexport {\n  // Sanitization\n  escapeHtml,\n  sanitizeInput,\n  sanitizeObject,\n  // Template rendering\n  TemplateRenderer,\n  templateRenderer,\n  renderTemplate,\n  // Query filtering\n  QueryFilterBuilder,\n  buildQuery,\n  // Metrics\n  metricsTracker,\n  // Version\n  SONICJS_VERSION,\n  getCoreVersion,\n} from './utils'\n\nexport type {\n  FilterOperator,\n  FilterCondition,\n  FilterGroup,\n  QueryFilter,\n  QueryResult,\n} from './utils'\n\n// Database - Week 1 (COMPLETED)\nexport {\n  createDb,\n  // Schema exports\n  users,\n  collections,\n  content,\n  contentVersions,\n  media,\n  apiTokens,\n  workflowHistory,\n  plugins,\n  pluginHooks,\n  pluginRoutes,\n  pluginAssets,\n  pluginActivityLog,\n  systemLogs,\n  logConfig,\n  // Zod validation schemas\n  insertUserSchema,\n  selectUserSchema,\n  insertCollectionSchema,\n  selectCollectionSchema,\n  insertContentSchema,\n  selectContentSchema,\n  insertMediaSchema,\n  selectMediaSchema,\n  insertWorkflowHistorySchema,\n  selectWorkflowHistorySchema,\n  insertPluginSchema,\n  selectPluginSchema,\n  insertPluginHookSchema,\n  selectPluginHookSchema,\n  insertPluginRouteSchema,\n  selectPluginRouteSchema,\n  insertPluginAssetSchema,\n  selectPluginAssetSchema,\n  insertPluginActivityLogSchema,\n  selectPluginActivityLogSchema,\n  insertSystemLogSchema,\n  selectSystemLogSchema,\n  insertLogConfigSchema,\n  selectLogConfigSchema,\n} from './db'\n\nexport type {\n  User,\n  NewUser,\n  Collection,\n  NewCollection,\n  Content,\n  NewContent,\n  Media,\n  NewMedia,\n  WorkflowHistory,\n  NewWorkflowHistory,\n  Plugin as DbPlugin,\n  NewPlugin,\n  PluginHook as DbPluginHook,\n  NewPluginHook,\n  PluginRoute,\n  NewPluginRoute,\n  PluginAsset,\n  NewPluginAsset,\n  PluginActivityLog,\n  NewPluginActivityLog,\n  SystemLog,\n  NewSystemLog,\n  LogConfig,\n  NewLogConfig,\n} from './db'\n\n// Plugins - Week 2\n// export { PluginBuilder, HookSystem } from './plugins/sdk'\n\n// ============================================================================\n// Version\n// ============================================================================\n\n// Import version from package.json\nimport packageJson from '../package.json'\nexport const VERSION = packageJson.version\n\n// ============================================================================\n// Phase 2 Migration Notes\n// ============================================================================\n\n/**\n * This is a work-in-progress package being extracted from the main SonicJS codebase.\n *\n * Current Phase: 2 (Core Module Migration)\n * Current Week: 1 (Types, Utils, Database)\n *\n * Expected completion: 4 weeks from 2025-01-17\n *\n * DO NOT USE IN PRODUCTION - Alpha release for development only\n */\n"]}