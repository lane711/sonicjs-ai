{"version":3,"sources":["../src/services/cache.ts"],"names":[],"mappings":"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","file":"chunk-ISN4UVUT.js","sourcesContent":["/**\n * Simple Cache Service\n *\n * Provides basic caching functionality for the core package\n * Can be extended with KV or other storage backends\n */\n\nexport interface CacheConfig {\n  ttl: number // Time to live in seconds\n  keyPrefix: string\n}\n\nexport class CacheService {\n  private config: CacheConfig\n  private memoryCache: Map<string, { value: any; expires: number }> = new Map()\n\n  constructor(config: CacheConfig) {\n    this.config = config\n  }\n\n  /**\n   * Generate cache key with prefix\n   */\n  generateKey(type: string, identifier?: string): string {\n    const parts = [this.config.keyPrefix, type]\n    if (identifier) {\n      parts.push(identifier)\n    }\n    return parts.join(':')\n  }\n\n  /**\n   * Get value from cache\n   */\n  async get<T>(key: string): Promise<T | null> {\n    const cached = this.memoryCache.get(key)\n\n    if (!cached) {\n      return null\n    }\n\n    // Check if expired\n    if (Date.now() > cached.expires) {\n      this.memoryCache.delete(key)\n      return null\n    }\n\n    return cached.value as T\n  }\n\n  /**\n   * Get value from cache with source information\n   */\n  async getWithSource<T>(key: string): Promise<{\n    hit: boolean\n    data: T | null\n    source: string\n    ttl?: number\n  }> {\n    const cached = this.memoryCache.get(key)\n\n    if (!cached) {\n      return {\n        hit: false,\n        data: null,\n        source: 'none'\n      }\n    }\n\n    // Check if expired\n    if (Date.now() > cached.expires) {\n      this.memoryCache.delete(key)\n      return {\n        hit: false,\n        data: null,\n        source: 'expired'\n      }\n    }\n\n    return {\n      hit: true,\n      data: cached.value as T,\n      source: 'memory',\n      ttl: (cached.expires - Date.now()) / 1000 // TTL in seconds\n    }\n  }\n\n  /**\n   * Set value in cache\n   */\n  async set(key: string, value: any, ttl?: number): Promise<void> {\n    const expires = Date.now() + ((ttl || this.config.ttl) * 1000)\n    this.memoryCache.set(key, { value, expires })\n  }\n\n  /**\n   * Delete specific key from cache\n   */\n  async delete(key: string): Promise<void> {\n    this.memoryCache.delete(key)\n  }\n\n  /**\n   * Invalidate cache keys matching a pattern\n   * For memory cache, we do simple string matching\n   */\n  async invalidate(pattern: string): Promise<void> {\n    // Convert glob pattern to regex\n    const regexPattern = pattern\n      .replace(/\\*/g, '.*')\n      .replace(/\\?/g, '.')\n    const regex = new RegExp(`^${regexPattern}$`)\n\n    // Find and delete matching keys\n    for (const key of this.memoryCache.keys()) {\n      if (regex.test(key)) {\n        this.memoryCache.delete(key)\n      }\n    }\n  }\n\n  /**\n   * Clear all cache\n   */\n  async clear(): Promise<void> {\n    this.memoryCache.clear()\n  }\n}\n\n/**\n * Cache configurations for different data types\n */\nexport const CACHE_CONFIGS = {\n  api: {\n    ttl: 300, // 5 minutes\n    keyPrefix: 'api'\n  },\n  user: {\n    ttl: 600, // 10 minutes\n    keyPrefix: 'user'\n  },\n  content: {\n    ttl: 300, // 5 minutes\n    keyPrefix: 'content'\n  },\n  collection: {\n    ttl: 600, // 10 minutes\n    keyPrefix: 'collection'\n  }\n}\n\n/**\n * Get cache service instance for a config\n */\nexport function getCacheService(config: CacheConfig): CacheService {\n  return new CacheService(config)\n}\n"]}