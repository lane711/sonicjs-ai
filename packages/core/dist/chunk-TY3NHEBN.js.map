{"version":3,"sources":["../src/middleware/bootstrap.ts","../src/middleware/index.ts"],"names":[],"mappings":";;;AAWA,IAAI,iBAAA,GAAoB,KAAA;AAMjB,SAAS,mBAAA,GAAsB;AACpC,EAAA,OAAO,OAAO,GAAoC,IAAA,KAAe;AAE/D,IAAA,IAAI,iBAAA,EAAmB;AACrB,MAAA,OAAO,IAAA,EAAK;AAAA;AAId,IAAA,MAAM,IAAA,GAAO,EAAE,GAAA,CAAI,IAAA;AACnB,IAAA,IACE,IAAA,CAAK,UAAA,CAAW,UAAU,CAAA,IAC1B,IAAA,CAAK,UAAA,CAAW,UAAU,CAAA,IAC1B,IAAA,KAAS,SAAA,IACT,IAAA,CAAK,QAAA,CAAS,KAAK,CAAA,IACnB,IAAA,CAAK,QAAA,CAAS,MAAM,CAAA,IACpB,IAAA,CAAK,QAAA,CAAS,MAAM,CAAA,IACpB,IAAA,CAAK,QAAA,CAAS,MAAM,CAAA,IACpB,IAAA,CAAK,QAAA,CAAS,MAAM,CAAA,EACpB;AACA,MAAA,OAAO,IAAA,EAAK;AAAA;AAGd,IAAA,IAAI;AACF,MAAA,OAAA,CAAQ,IAAI,+CAA+C,CAAA;AAG3D,MAAA,OAAA,CAAQ,IAAI,4CAA4C,CAAA;AACxD,MAAA,MAAM,gBAAA,GAAmB,IAAI,gBAAA,CAAiB,CAAA,CAAE,IAAI,EAAE,CAAA;AACtD,MAAA,MAAM,iBAAiB,oBAAA,EAAqB;AAG5C,MAAA,OAAA,CAAQ,IAAI,kDAAkD,CAAA;AAC9D,MAAA,IAAI;AACF,QAAA,MAAM,eAAA,CAAgB,CAAA,CAAE,GAAA,CAAI,EAAE,CAAA;AAAA,eACvB,KAAA,EAAO;AACd,QAAA,OAAA,CAAQ,KAAA,CAAM,0CAA0C,KAAK,CAAA;AAAA;AAK/D,MAAA,OAAA,CAAQ,IAAI,2CAA2C,CAAA;AACvD,MAAA,MAAM,gBAAA,GAAmB,IAAI,sBAAA,CAAuB,CAAA,CAAE,IAAI,EAAE,CAAA;AAG5D,MAAA,MAAM,cAAA,GAAiB,MAAM,gBAAA,CAAiB,iBAAA,EAAkB;AAChE,MAAA,IAAI,cAAA,EAAgB;AAClB,QAAA,MAAM,iBAAiB,oBAAA,EAAqB;AAAA;AAI9C,MAAA,iBAAA,GAAoB,IAAA;AACpB,MAAA,OAAA,CAAQ,IAAI,6CAA6C,CAAA;AAAA,aAClD,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,mDAAmD,KAAK,CAAA;AAAA;AAIxE,IAAA,OAAO,IAAA,EAAK;AAAA,GACd;AACF;;;ACvDO,IAAM,cAAmB;AACzB,IAAM,cAAmB,MAAM;AAAC;AAChC,IAAM,cAAmB,MAAM;AAAC;AAChC,IAAM,eAAoB,MAAM;AAAC;AACjC,IAAM,oBAAyB,MAAM;AAAC;AACtC,IAAM,4BAAiC,MAAM;AAAC;AAC9C,IAAM,4BAAiC,MAAM;AAAC;AAC9C,IAAM,+BAAoC,MAAM;AAAC;AACjD,IAAM,eAAoB,MAAM;AAAC;AACjC,IAAM,wBAA6B,MAAM;AAAC;AAC1C,IAAM,kBAAuB,MAAM;AAAC;AACpC,IAAM,oBAAyB;AAC/B,IAAM,oBAAyB,MAAM;AAAC;AACtC,IAAM,uBAA4B,MAAM;AAAC;AACzC,IAAM,cAAmB,MAAM;AAAC;AAChC,IAAM,sBAA2B,MAAM;AAAC;AACxC,IAAM,uBAA4B,MAAM;AAAC;AACzC,IAAM,mBAAwB,MAAM;AAAC;AACrC,IAAM,iBAAsB,MAAM;AAAC","file":"chunk-TY3NHEBN.js","sourcesContent":["import { Context, Next } from \"hono\";\nimport { syncCollections } from \"../services/collection-sync\";\nimport { MigrationService } from \"../services/migrations\";\nimport { PluginBootstrapService } from \"../services/plugin-bootstrap\";\n\ntype Bindings = {\n  DB: D1Database;\n  KV: KVNamespace;\n};\n\n// Track if bootstrap has been run in this worker instance\nlet bootstrapComplete = false;\n\n/**\n * Bootstrap middleware that ensures system initialization\n * Runs once per worker instance\n */\nexport function bootstrapMiddleware() {\n  return async (c: Context<{ Bindings: Bindings }>, next: Next) => {\n    // Skip if already bootstrapped in this worker instance\n    if (bootstrapComplete) {\n      return next();\n    }\n\n    // Skip bootstrap for static assets and health checks\n    const path = c.req.path;\n    if (\n      path.startsWith(\"/images/\") ||\n      path.startsWith(\"/assets/\") ||\n      path === \"/health\" ||\n      path.endsWith(\".js\") ||\n      path.endsWith(\".css\") ||\n      path.endsWith(\".png\") ||\n      path.endsWith(\".jpg\") ||\n      path.endsWith(\".ico\")\n    ) {\n      return next();\n    }\n\n    try {\n      console.log(\"[Bootstrap] Starting system initialization...\");\n\n      // 1. Run database migrations first\n      console.log(\"[Bootstrap] Running database migrations...\");\n      const migrationService = new MigrationService(c.env.DB);\n      await migrationService.runPendingMigrations();\n\n      // 2. Sync collection configurations\n      console.log(\"[Bootstrap] Syncing collection configurations...\");\n      try {\n        await syncCollections(c.env.DB);\n      } catch (error) {\n        console.error(\"[Bootstrap] Error syncing collections:\", error);\n        // Continue bootstrap even if collection sync fails\n      }\n\n      // 3. Bootstrap core plugins\n      console.log(\"[Bootstrap] Bootstrapping core plugins...\");\n      const bootstrapService = new PluginBootstrapService(c.env.DB);\n\n      // Check if bootstrap is needed\n      const needsBootstrap = await bootstrapService.isBootstrapNeeded();\n      if (needsBootstrap) {\n        await bootstrapService.bootstrapCorePlugins();\n      }\n\n      // Mark bootstrap as complete for this worker instance\n      bootstrapComplete = true;\n      console.log(\"[Bootstrap] System initialization completed\");\n    } catch (error) {\n      console.error(\"[Bootstrap] Error during system initialization:\", error);\n      // Don't prevent the app from starting, but log the error\n    }\n\n    return next();\n  };\n}\n\n/**\n * Reset bootstrap flag (useful for testing)\n */\nexport function resetBootstrap() {\n  bootstrapComplete = false;\n}\n","/**\n * Middleware Module Exports\n *\n * Request processing middleware for SonicJS\n *\n * Note: Most middleware is currently in the monolith and will be migrated later.\n * For now, we only export the bootstrap middleware which is used for system initialization.\n */\n\n// Bootstrap middleware\nexport { bootstrapMiddleware } from './bootstrap'\n\n// Re-export types and functions that are referenced but implemented in monolith\n// These are placeholder exports to maintain API compatibility\nexport type Permission = string\nexport type UserPermissions = {\n  userId: string\n  permissions: Permission[]\n}\n\n// Placeholder exports (to be implemented when middleware is migrated)\nexport const AuthManager: any = {}\nexport const requireAuth: any = () => {}\nexport const requireRole: any = () => {}\nexport const optionalAuth: any = () => {}\nexport const loggingMiddleware: any = () => {}\nexport const detailedLoggingMiddleware: any = () => {}\nexport const securityLoggingMiddleware: any = () => {}\nexport const performanceLoggingMiddleware: any = () => {}\nexport const cacheHeaders: any = () => {}\nexport const compressionMiddleware: any = () => {}\nexport const securityHeaders: any = () => {}\nexport const PermissionManager: any = {}\nexport const requirePermission: any = () => {}\nexport const requireAnyPermission: any = () => {}\nexport const logActivity: any = () => {}\nexport const requireActivePlugin: any = () => {}\nexport const requireActivePlugins: any = () => {}\nexport const getActivePlugins: any = () => {}\nexport const isPluginActive: any = () => {}\n"]}