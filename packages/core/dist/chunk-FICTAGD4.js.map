{"version":3,"sources":["../src/utils/metrics.ts"],"names":[],"mappings":";AASA,IAAM,iBAAN,MAAqB;AAAA,EACX,WAA6B,EAAC;AAAA,EACrB,UAAA,GAAa,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAK9B,aAAA,GAAsB;AACpB,IAAA,MAAM,GAAA,GAAM,KAAK,GAAA,EAAI;AACrB,IAAA,IAAA,CAAK,QAAA,CAAS,IAAA,CAAK,EAAE,SAAA,EAAW,KAAK,CAAA;AACrC,IAAA,IAAA,CAAK,QAAQ,GAAG,CAAA;AAAA;AAClB;AAAA;AAAA;AAAA,EAKQ,QAAQ,GAAA,EAAmB;AACjC,IAAA,MAAM,MAAA,GAAS,MAAM,IAAA,CAAK,UAAA;AAC1B,IAAA,IAAA,CAAK,WAAW,IAAA,CAAK,QAAA,CAAS,OAAO,CAAA,GAAA,KAAO,GAAA,CAAI,YAAY,MAAM,CAAA;AAAA;AACpE;AAAA;AAAA;AAAA,EAKA,oBAAA,GAA+B;AAC7B,IAAA,MAAM,GAAA,GAAM,KAAK,GAAA,EAAI;AACrB,IAAA,IAAA,CAAK,QAAQ,GAAG,CAAA;AAEhB,IAAA,IAAI,IAAA,CAAK,QAAA,CAAS,MAAA,KAAW,CAAA,EAAG;AAC9B,MAAA,OAAO,CAAA;AAAA;AAIT,IAAA,MAAM,eAAe,GAAA,GAAM,GAAA;AAC3B,IAAA,MAAM,iBAAiB,IAAA,CAAK,QAAA,CAAS,OAAO,CAAA,GAAA,KAAO,GAAA,CAAI,YAAY,YAAY,CAAA;AAE/E,IAAA,OAAO,cAAA,CAAe,MAAA;AAAA;AACxB;AAAA;AAAA;AAAA,EAKA,gBAAA,GAA2B;AACzB,IAAA,MAAM,GAAA,GAAM,KAAK,GAAA,EAAI;AACrB,IAAA,IAAA,CAAK,QAAQ,GAAG,CAAA;AAChB,IAAA,OAAO,KAAK,QAAA,CAAS,MAAA;AAAA;AACvB;AAAA;AAAA;AAAA,EAKA,aAAA,GAAwB;AACtB,IAAA,MAAM,GAAA,GAAM,KAAK,GAAA,EAAI;AACrB,IAAA,IAAA,CAAK,QAAQ,GAAG,CAAA;AAEhB,IAAA,IAAI,IAAA,CAAK,QAAA,CAAS,MAAA,KAAW,CAAA,EAAG;AAC9B,MAAA,OAAO,CAAA;AAAA;AAGT,IAAA,MAAM,aAAA,GAAgB,KAAK,UAAA,GAAa,GAAA;AACxC,IAAA,OAAO,IAAA,CAAK,SAAS,MAAA,GAAS,aAAA;AAAA;AAElC,CAAA;AAGO,IAAM,cAAA,GAAiB,IAAI,cAAA","file":"chunk-FICTAGD4.js","sourcesContent":["/**\n * Simple in-memory metrics tracker for real-time analytics\n * Tracks requests per second using a sliding window\n */\n\ninterface RequestMetrics {\n  timestamp: number\n}\n\nclass MetricsTracker {\n  private requests: RequestMetrics[] = []\n  private readonly windowSize = 10000 // 10 seconds window\n\n  /**\n   * Record a new request\n   */\n  recordRequest(): void {\n    const now = Date.now()\n    this.requests.push({ timestamp: now })\n    this.cleanup(now)\n  }\n\n  /**\n   * Clean up old requests outside the window\n   */\n  private cleanup(now: number): void {\n    const cutoff = now - this.windowSize\n    this.requests = this.requests.filter(req => req.timestamp > cutoff)\n  }\n\n  /**\n   * Get current requests per second\n   */\n  getRequestsPerSecond(): number {\n    const now = Date.now()\n    this.cleanup(now)\n\n    if (this.requests.length === 0) {\n      return 0\n    }\n\n    // Calculate RPS over the last second\n    const oneSecondAgo = now - 1000\n    const recentRequests = this.requests.filter(req => req.timestamp > oneSecondAgo)\n\n    return recentRequests.length\n  }\n\n  /**\n   * Get total requests in the current window\n   */\n  getTotalRequests(): number {\n    const now = Date.now()\n    this.cleanup(now)\n    return this.requests.length\n  }\n\n  /**\n   * Get average requests per second over the window\n   */\n  getAverageRPS(): number {\n    const now = Date.now()\n    this.cleanup(now)\n\n    if (this.requests.length === 0) {\n      return 0\n    }\n\n    const windowSeconds = this.windowSize / 1000\n    return this.requests.length / windowSeconds\n  }\n}\n\n// Global singleton instance\nexport const metricsTracker = new MetricsTracker()\n"]}