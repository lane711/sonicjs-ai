{"version":3,"sources":["../src/schemas/index.ts","../src/routes/api-content-crud.ts","../src/routes/api.ts","../src/routes/index.ts"],"names":["Hono","requireAuth","getCacheService","CACHE_CONFIGS","isPluginActive","cors","QueryFilterBuilder"],"mappings":"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","file":"chunk-YF6OCX54.cjs","sourcesContent":["/**\n * Schema Definitions\n *\n * Placeholder for schema definitions - to be populated as needed\n */\n\nexport interface SchemaDefinition {\n  name: string\n  fields: any[]\n}\n\n// Empty array for now - schemas will be migrated incrementally\nexport const schemaDefinitions: SchemaDefinition[] = []\n","import { Hono } from 'hono'\nimport { requireAuth } from '../middleware'\nimport { getCacheService, CACHE_CONFIGS } from '../services'\nimport type { Bindings, Variables } from '../app'\n\nconst apiContentCrudRoutes = new Hono<{ Bindings: Bindings; Variables: Variables }>()\n\n// GET /api/content/:id - Get single content item by ID\napiContentCrudRoutes.get('/:id', async (c) => {\n  try {\n    const id = c.req.param('id')\n    const db = c.env.DB\n\n    const stmt = db.prepare('SELECT * FROM content WHERE id = ?')\n    const content = await stmt.bind(id).first()\n\n    if (!content) {\n      return c.json({ error: 'Content not found' }, 404)\n    }\n\n    const transformedContent = {\n      id: (content as any).id,\n      title: (content as any).title,\n      slug: (content as any).slug,\n      status: (content as any).status,\n      collectionId: (content as any).collection_id,\n      data: (content as any).data ? JSON.parse((content as any).data) : {},\n      created_at: (content as any).created_at,\n      updated_at: (content as any).updated_at\n    }\n\n    return c.json({ data: transformedContent })\n  } catch (error) {\n    console.error('Error fetching content:', error)\n    return c.json({\n      error: 'Failed to fetch content',\n      details: error instanceof Error ? error.message : String(error)\n    }, 500)\n  }\n})\n\n// POST /api/content - Create new content (requires authentication)\napiContentCrudRoutes.post('/', requireAuth(), async (c) => {\n  try {\n    const db = c.env.DB\n    const user = c.get('user')\n    const body = await c.req.json()\n\n    const { collectionId, title, slug, status, data } = body\n\n    // Validate required fields\n    if (!collectionId) {\n      return c.json({ error: 'collectionId is required' }, 400)\n    }\n\n    if (!title) {\n      return c.json({ error: 'title is required' }, 400)\n    }\n\n    // Generate slug from title if not provided\n    let finalSlug = slug || title\n    finalSlug = finalSlug.toLowerCase()\n      .replace(/[^a-z0-9\\s-]/g, '')\n      .replace(/\\s+/g, '-')\n      .replace(/-+/g, '-')\n      .trim()\n\n    // Check for duplicate slug within the same collection\n    const duplicateCheck = db.prepare(\n      'SELECT id FROM content WHERE collection_id = ? AND slug = ?'\n    )\n    const existing = await duplicateCheck.bind(collectionId, finalSlug).first()\n\n    if (existing) {\n      return c.json({ error: 'A content item with this slug already exists in this collection' }, 409)\n    }\n\n    // Create new content\n    const contentId = crypto.randomUUID()\n    const now = Date.now()\n\n    const insertStmt = db.prepare(`\n      INSERT INTO content (\n        id, collection_id, slug, title, data, status,\n        author_id, created_at, updated_at\n      )\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `)\n\n    await insertStmt.bind(\n      contentId,\n      collectionId,\n      finalSlug,\n      title,\n      JSON.stringify(data || {}),\n      status || 'draft',\n      user?.userId || 'unknown',\n      now,\n      now\n    ).run()\n\n    // Invalidate cache\n    const cache = getCacheService(CACHE_CONFIGS.api!)\n    await cache.invalidate(`content:list:${collectionId}:*`)\n    await cache.invalidate('content-filtered:*')\n\n    // Get the created content\n    const getStmt = db.prepare('SELECT * FROM content WHERE id = ?')\n    const createdContent = await getStmt.bind(contentId).first() as any\n\n    return c.json({\n      data: {\n        id: createdContent.id,\n        title: createdContent.title,\n        slug: createdContent.slug,\n        status: createdContent.status,\n        collectionId: createdContent.collection_id,\n        data: createdContent.data ? JSON.parse(createdContent.data) : {},\n        created_at: createdContent.created_at,\n        updated_at: createdContent.updated_at\n      }\n    }, 201)\n  } catch (error) {\n    console.error('Error creating content:', error)\n    return c.json({\n      error: 'Failed to create content',\n      details: error instanceof Error ? error.message : String(error)\n    }, 500)\n  }\n})\n\n// PUT /api/content/:id - Update content (requires authentication)\napiContentCrudRoutes.put('/:id', requireAuth(), async (c) => {\n  try {\n    const id = c.req.param('id')\n    const db = c.env.DB\n    const body = await c.req.json()\n\n    // Check if content exists\n    const existingStmt = db.prepare('SELECT * FROM content WHERE id = ?')\n    const existing = await existingStmt.bind(id).first() as any\n\n    if (!existing) {\n      return c.json({ error: 'Content not found' }, 404)\n    }\n\n    // Build update fields dynamically\n    const updates: string[] = []\n    const params: any[] = []\n\n    if (body.title !== undefined) {\n      updates.push('title = ?')\n      params.push(body.title)\n    }\n\n    if (body.slug !== undefined) {\n      let finalSlug = body.slug.toLowerCase()\n        .replace(/[^a-z0-9\\s-]/g, '')\n        .replace(/\\s+/g, '-')\n        .replace(/-+/g, '-')\n        .trim()\n      updates.push('slug = ?')\n      params.push(finalSlug)\n    }\n\n    if (body.status !== undefined) {\n      updates.push('status = ?')\n      params.push(body.status)\n    }\n\n    if (body.data !== undefined) {\n      updates.push('data = ?')\n      params.push(JSON.stringify(body.data))\n    }\n\n    // Always update updated_at\n    const now = Date.now()\n    updates.push('updated_at = ?')\n    params.push(now)\n\n    // Add id to params for WHERE clause\n    params.push(id)\n\n    // Execute update\n    const updateStmt = db.prepare(`\n      UPDATE content SET ${updates.join(', ')}\n      WHERE id = ?\n    `)\n\n    await updateStmt.bind(...params).run()\n\n    // Invalidate cache\n    const cache = getCacheService(CACHE_CONFIGS.api!)\n    await cache.delete(cache.generateKey('content', id))\n    await cache.invalidate(`content:list:${existing.collection_id}:*`)\n    await cache.invalidate('content-filtered:*')\n\n    // Get updated content\n    const getStmt = db.prepare('SELECT * FROM content WHERE id = ?')\n    const updatedContent = await getStmt.bind(id).first() as any\n\n    return c.json({\n      data: {\n        id: updatedContent.id,\n        title: updatedContent.title,\n        slug: updatedContent.slug,\n        status: updatedContent.status,\n        collectionId: updatedContent.collection_id,\n        data: updatedContent.data ? JSON.parse(updatedContent.data) : {},\n        created_at: updatedContent.created_at,\n        updated_at: updatedContent.updated_at\n      }\n    })\n  } catch (error) {\n    console.error('Error updating content:', error)\n    return c.json({\n      error: 'Failed to update content',\n      details: error instanceof Error ? error.message : String(error)\n    }, 500)\n  }\n})\n\n// DELETE /api/content/:id - Delete content (requires authentication)\napiContentCrudRoutes.delete('/:id', requireAuth(), async (c) => {\n  try {\n    const id = c.req.param('id')\n    const db = c.env.DB\n\n    // Check if content exists\n    const existingStmt = db.prepare('SELECT collection_id FROM content WHERE id = ?')\n    const existing = await existingStmt.bind(id).first() as any\n\n    if (!existing) {\n      return c.json({ error: 'Content not found' }, 404)\n    }\n\n    // Delete the content (hard delete for API, soft delete happens in admin routes)\n    const deleteStmt = db.prepare('DELETE FROM content WHERE id = ?')\n    await deleteStmt.bind(id).run()\n\n    // Invalidate cache\n    const cache = getCacheService(CACHE_CONFIGS.api!)\n    await cache.delete(cache.generateKey('content', id))\n    await cache.invalidate(`content:list:${existing.collection_id}:*`)\n    await cache.invalidate('content-filtered:*')\n\n    return c.json({ success: true })\n  } catch (error) {\n    console.error('Error deleting content:', error)\n    return c.json({\n      error: 'Failed to delete content',\n      details: error instanceof Error ? error.message : String(error)\n    }, 500)\n  }\n})\n\nexport default apiContentCrudRoutes\n","import { Hono } from 'hono'\nimport { cors } from 'hono/cors'\nimport { schemaDefinitions } from '../schemas'\nimport { getCacheService, CACHE_CONFIGS } from '../services'\nimport { QueryFilterBuilder, QueryFilter } from '../utils'\nimport { isPluginActive } from '../middleware'\nimport apiContentCrudRoutes from './api-content-crud'\nimport type { Bindings, Variables as AppVariables } from '../app'\n\n// Extend Variables with API-specific fields\ninterface Variables extends AppVariables {\n  startTime: number\n  cacheEnabled?: boolean\n}\n\nconst apiRoutes = new Hono<{ Bindings: Bindings; Variables: Variables }>()\n\n// Add timing middleware\napiRoutes.use('*', async (c, next) => {\n  const startTime = Date.now()\n  c.set('startTime', startTime)\n  await next()\n  const totalTime = Date.now() - startTime\n  c.header('X-Response-Time', `${totalTime}ms`)\n})\n\n// Check if cache plugin is active\napiRoutes.use('*', async (c, next) => {\n  const cacheEnabled = await isPluginActive(c.env.DB, 'core-cache')\n  c.set('cacheEnabled', cacheEnabled)\n  await next()\n})\n\n// Add CORS middleware\napiRoutes.use('*', cors({\n  origin: '*',\n  allowMethods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowHeaders: ['Content-Type', 'Authorization']\n}))\n\n// Helper function to add timing metadata\nfunction addTimingMeta(c: any, meta: any = {}, executionStartTime?: number) {\n  const totalTime = Date.now() - c.get('startTime')\n  const executionTime = executionStartTime ? Date.now() - executionStartTime : undefined\n\n  return {\n    ...meta,\n    timing: {\n      total: totalTime,\n      execution: executionTime,\n      unit: 'ms'\n    }\n  }\n}\n\n// Root endpoint - API info\napiRoutes.get('/', (c) => {\n  return c.json({\n    name: 'SonicJS API',\n    version: '2.0.0',\n    description: 'RESTful API for SonicJS headless CMS',\n    endpoints: {\n      health: '/api/health',\n      collections: '/api/collections',\n      content: '/api/content',\n      contentById: '/api/content/:id',\n      collectionContent: '/api/collections/:collection/content'\n    },\n    documentation: '/docs'\n  })\n})\n\n// Health check endpoint\napiRoutes.get('/health', (c) => {\n  return c.json({\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    schemas: schemaDefinitions.map(s => s.name)\n  })\n})\n\n// Basic collections endpoint\napiRoutes.get('/collections', async (c) => {\n  const executionStart = Date.now()\n\n  try {\n    const db = c.env.DB\n    const cacheEnabled = c.get('cacheEnabled')\n    const cache = getCacheService(CACHE_CONFIGS.api!)\n    const cacheKey = cache.generateKey('collections', 'all')\n\n    // Use cache only if cache plugin is active\n    if (cacheEnabled) {\n      const cacheResult = await cache.getWithSource<any>(cacheKey)\n      if (cacheResult.hit && cacheResult.data) {\n        // Add cache headers\n        c.header('X-Cache-Status', 'HIT')\n        c.header('X-Cache-Source', cacheResult.source)\n        if (cacheResult.ttl) {\n          c.header('X-Cache-TTL', Math.floor(cacheResult.ttl).toString())\n        }\n\n        // Add cache info and timing to meta\n        const dataWithMeta = {\n          ...cacheResult.data,\n          meta: addTimingMeta(c, {\n            ...cacheResult.data.meta,\n            cache: {\n              hit: true,\n              source: cacheResult.source,\n              ttl: cacheResult.ttl ? Math.floor(cacheResult.ttl) : undefined\n            }\n          }, executionStart)\n        }\n\n        return c.json(dataWithMeta)\n      }\n    }\n\n    // Cache miss - fetch from database\n    c.header('X-Cache-Status', 'MISS')\n    c.header('X-Cache-Source', 'database')\n\n    const stmt = db.prepare('SELECT * FROM collections WHERE is_active = 1')\n    const { results } = await stmt.all()\n\n    // Parse schema and format results\n    const transformedResults = results.map((row: any) => ({\n      ...row,\n      schema: row.schema ? JSON.parse(row.schema) : {},\n      is_active: row.is_active // Keep as number (1 or 0)\n    }))\n\n    const responseData = {\n      data: transformedResults,\n      meta: addTimingMeta(c, {\n        count: results.length,\n        timestamp: new Date().toISOString(),\n        cache: {\n          hit: false,\n          source: 'database'\n        }\n      }, executionStart)\n    }\n\n    // Cache the response only if cache plugin is enabled\n    if (cacheEnabled) {\n      await cache.set(cacheKey, responseData)\n    }\n\n    return c.json(responseData)\n  } catch (error) {\n    console.error('Error fetching collections:', error)\n    return c.json({ error: 'Failed to fetch collections' }, 500)\n  }\n})\n\n// Basic content endpoint with advanced filtering\napiRoutes.get('/content', async (c) => {\n  const executionStart = Date.now()\n\n  try {\n    const db = c.env.DB\n    const queryParams = c.req.query()\n\n    // Handle collection parameter - convert collection name to collection_id\n    if (queryParams.collection) {\n      const collectionName = queryParams.collection\n      const collectionStmt = db.prepare('SELECT id FROM collections WHERE name = ? AND is_active = 1')\n      const collectionResult = await collectionStmt.bind(collectionName).first()\n\n      if (collectionResult) {\n        // Replace 'collection' param with 'collection_id' for the filter builder\n        queryParams.collection_id = (collectionResult as any).id\n        delete queryParams.collection\n      } else {\n        // Collection not found - return empty result\n        return c.json({\n          data: [],\n          meta: addTimingMeta(c, {\n            count: 0,\n            timestamp: new Date().toISOString(),\n            message: `Collection '${collectionName}' not found`\n          }, executionStart)\n        })\n      }\n    }\n\n    // Parse filter from query parameters\n    const filter: QueryFilter = QueryFilterBuilder.parseFromQuery(queryParams)\n\n    // Set default limit if not provided\n    if (!filter.limit) {\n      filter.limit = 50\n    }\n    filter.limit = Math.min(filter.limit, 1000) // Max 1000\n\n    // Build SQL query from filter\n    const builder = new QueryFilterBuilder()\n    const queryResult = builder.build('content', filter)\n\n    // Check for query building errors\n    if (queryResult.errors.length > 0) {\n      return c.json({\n        error: 'Invalid filter parameters',\n        details: queryResult.errors\n      }, 400)\n    }\n\n    // Only use cache if cache plugin is active\n    const cacheEnabled = c.get('cacheEnabled')\n    const cache = getCacheService(CACHE_CONFIGS.api!)\n    const cacheKey = cache.generateKey('content-filtered', JSON.stringify({ filter, query: queryResult.sql }))\n\n    if (cacheEnabled) {\n      const cacheResult = await cache.getWithSource<any>(cacheKey)\n      if (cacheResult.hit && cacheResult.data) {\n        // Add cache headers\n        c.header('X-Cache-Status', 'HIT')\n        c.header('X-Cache-Source', cacheResult.source)\n        if (cacheResult.ttl) {\n          c.header('X-Cache-TTL', Math.floor(cacheResult.ttl).toString())\n        }\n\n        // Add cache info and timing to meta\n        const dataWithMeta = {\n          ...cacheResult.data,\n          meta: addTimingMeta(c, {\n            ...cacheResult.data.meta,\n            cache: {\n              hit: true,\n              source: cacheResult.source,\n              ttl: cacheResult.ttl ? Math.floor(cacheResult.ttl) : undefined\n            }\n          }, executionStart)\n        }\n\n        return c.json(dataWithMeta)\n      }\n    }\n\n    // Cache miss - fetch from database\n    c.header('X-Cache-Status', 'MISS')\n    c.header('X-Cache-Source', 'database')\n\n    // Execute query with parameters\n    const stmt = db.prepare(queryResult.sql)\n    const boundStmt = queryResult.params.length > 0\n      ? stmt.bind(...queryResult.params)\n      : stmt\n\n    const { results } = await boundStmt.all()\n\n    // Transform results to match API spec (camelCase)\n    const transformedResults = results.map((row: any) => ({\n      id: row.id,\n      title: row.title,\n      slug: row.slug,\n      status: row.status,\n      collectionId: row.collection_id,\n      data: row.data ? JSON.parse(row.data) : {},\n      created_at: row.created_at,\n      updated_at: row.updated_at\n    }))\n\n    const responseData = {\n      data: transformedResults,\n      meta: addTimingMeta(c, {\n        count: results.length,\n        timestamp: new Date().toISOString(),\n        filter: filter,\n        query: {\n          sql: queryResult.sql,\n          params: queryResult.params\n        },\n        cache: {\n          hit: false,\n          source: 'database'\n        }\n      }, executionStart)\n    }\n\n    // Cache the response only if cache is enabled\n    if (cacheEnabled) {\n      await cache.set(cacheKey, responseData)\n    }\n\n    return c.json(responseData)\n  } catch (error) {\n    console.error('Error fetching content:', error)\n    return c.json({\n      error: 'Failed to fetch content',\n      details: error instanceof Error ? error.message : String(error)\n    }, 500)\n  }\n})\n\n// Collection-specific routes with advanced filtering\napiRoutes.get('/collections/:collection/content', async (c) => {\n  const executionStart = Date.now()\n\n  try {\n    const collection = c.req.param('collection')\n    const db = c.env.DB\n    const queryParams = c.req.query()\n\n    // First check if collection exists\n    const collectionStmt = db.prepare('SELECT * FROM collections WHERE name = ? AND is_active = 1')\n    const collectionResult = await collectionStmt.bind(collection).first()\n\n    if (!collectionResult) {\n      return c.json({ error: 'Collection not found' }, 404)\n    }\n\n    // Parse filter from query parameters\n    const filter: QueryFilter = QueryFilterBuilder.parseFromQuery(queryParams)\n\n    // Add collection_id filter to where clause\n    if (!filter.where) {\n      filter.where = { and: [] }\n    }\n\n    if (!filter.where.and) {\n      filter.where.and = []\n    }\n\n    // Add collection filter\n    filter.where.and.push({\n      field: 'collection_id',\n      operator: 'equals',\n      value: (collectionResult as any).id\n    })\n\n    // Set default limit if not provided\n    if (!filter.limit) {\n      filter.limit = 50\n    }\n    filter.limit = Math.min(filter.limit, 1000)\n\n    // Build SQL query from filter\n    const builder = new QueryFilterBuilder()\n    const queryResult = builder.build('content', filter)\n\n    // Check for query building errors\n    if (queryResult.errors.length > 0) {\n      return c.json({\n        error: 'Invalid filter parameters',\n        details: queryResult.errors\n      }, 400)\n    }\n\n    // Generate cache key\n    const cacheEnabled = c.get('cacheEnabled')\n    const cache = getCacheService(CACHE_CONFIGS.api!)\n    const cacheKey = cache.generateKey('collection-content-filtered', `${collection}:${JSON.stringify({ filter, query: queryResult.sql })}`)\n\n    // Only check cache if plugin is enabled\n    if (cacheEnabled) {\n      const cacheResult = await cache.getWithSource<any>(cacheKey)\n      if (cacheResult.hit && cacheResult.data) {\n        // Add cache headers\n        c.header('X-Cache-Status', 'HIT')\n        c.header('X-Cache-Source', cacheResult.source)\n        if (cacheResult.ttl) {\n          c.header('X-Cache-TTL', Math.floor(cacheResult.ttl).toString())\n        }\n\n        // Add cache info and timing to meta\n        const dataWithMeta = {\n          ...cacheResult.data,\n          meta: addTimingMeta(c, {\n            ...cacheResult.data.meta,\n            cache: {\n              hit: true,\n              source: cacheResult.source,\n              ttl: cacheResult.ttl ? Math.floor(cacheResult.ttl) : undefined\n            }\n          }, executionStart)\n        }\n\n        return c.json(dataWithMeta)\n      }\n    }\n\n    // Cache miss - fetch from database\n    c.header('X-Cache-Status', 'MISS')\n    c.header('X-Cache-Source', 'database')\n\n    // Execute query with parameters\n    const stmt = db.prepare(queryResult.sql)\n    const boundStmt = queryResult.params.length > 0\n      ? stmt.bind(...queryResult.params)\n      : stmt\n\n    const { results } = await boundStmt.all()\n\n    // Transform results to match API spec (camelCase)\n    const transformedResults = results.map((row: any) => ({\n      id: row.id,\n      title: row.title,\n      slug: row.slug,\n      status: row.status,\n      collectionId: row.collection_id,\n      data: row.data ? JSON.parse(row.data) : {},\n      created_at: row.created_at,\n      updated_at: row.updated_at\n    }))\n\n    const responseData = {\n      data: transformedResults,\n      meta: addTimingMeta(c, {\n        collection: {\n          ...(collectionResult as any),\n          schema: (collectionResult as any).schema ? JSON.parse((collectionResult as any).schema) : {}\n        },\n        count: results.length,\n        timestamp: new Date().toISOString(),\n        filter: filter,\n        query: {\n          sql: queryResult.sql,\n          params: queryResult.params\n        },\n        cache: {\n          hit: false,\n          source: 'database'\n        }\n      }, executionStart)\n    }\n\n    // Cache the response only if cache plugin is enabled\n    if (cacheEnabled) {\n      await cache.set(cacheKey, responseData)\n    }\n\n    return c.json(responseData)\n  } catch (error) {\n    console.error('Error fetching content:', error)\n    return c.json({\n      error: 'Failed to fetch content',\n      details: error instanceof Error ? error.message : String(error)\n    }, 500)\n  }\n})\n\n// Mount CRUD routes for content\napiRoutes.route('/content', apiContentCrudRoutes)\n\nexport default apiRoutes\n","/**\n * Routes Module Exports\n *\n * Routes are being migrated incrementally from the monolith.\n * Each route is refactored to remove monolith-specific dependencies.\n */\n\n// API routes\nexport { default as apiRoutes } from './api'\nexport { default as apiContentCrudRoutes } from './api-content-crud'\n\nexport const ROUTES_INFO = {\n  message: 'Routes migration in progress',\n  available: [\n    'apiRoutes',\n    'apiContentCrudRoutes'\n  ],\n  status: 'Routes are being added incrementally',\n  reference: 'https://github.com/sonicjs/sonicjs'\n} as const\n"]}