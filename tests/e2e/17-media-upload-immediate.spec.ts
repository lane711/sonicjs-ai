import { test, expect } from '@playwright/test';
import { loginAsAdmin } from './utils/test-helpers';

test.describe('Media Upload - Immediate Availability', () => {
  test('uploaded photo should appear immediately in media list', async ({ page }) => {
    await loginAsAdmin(page);
    await page.goto('/admin/media');
    await page.waitForLoadState('networkidle');

    // Open upload modal
    await page.locator('button').filter({ hasText: 'Upload Files' }).first().click();
    await expect(page.locator('#upload-modal')).toBeVisible();

    // Create test image buffer
    const testImageBuffer = Buffer.from([
      0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01,
      0x01, 0x01, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43,
      0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07, 0x07, 0x07, 0x09,
      0x09, 0x08, 0x0A, 0x0C, 0x14, 0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12,
      0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A, 0x1C, 0x1C, 0x20,
      0x24, 0x2E, 0x27, 0x20, 0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29,
      0x2C, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27, 0x39, 0x3D, 0x38, 0x32,
      0x3C, 0x2E, 0x33, 0x34, 0x32, 0xFF, 0xC0, 0x00, 0x11, 0x08, 0x00, 0x01,
      0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01,
      0xFF, 0xC4, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xFF, 0xC4,
      0x00, 0x14, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xDA, 0x00, 0x0C,
      0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3F, 0x00, 0x80, 0xFF, 0xD9
    ]);

    const uniqueFilename = `test-immediate-${Date.now()}.jpg`;

    // Upload file
    await page.setInputFiles('#file-input', {
      name: uniqueFilename,
      mimeType: 'image/jpeg',
      buffer: testImageBuffer
    });

    // Submit upload
    await page.locator('#upload-modal button[type="submit"]').click();

    // Wait for success message
    await expect(page.locator('#upload-results')).toContainText('Successfully uploaded', { timeout: 10000 });

    // Wait for page to redirect with cache-busting parameter
    await page.waitForURL(/\/admin\/media\?t=/, { timeout: 5000 });

    // Page should be fully loaded after refresh
    await page.waitForLoadState('networkidle', { timeout: 10000 });

    // After refresh, verify the new file appears in the grid by filename
    // (It should be at the top since files are sorted by upload date DESC)
    await expect(page.locator('#media-grid')).toContainText(uniqueFilename, { timeout: 10000 });

    // Modal should be closed after refresh
    await expect(page.locator('#upload-modal')).toBeHidden();

    // Verify at least one checkbox exists (media files are present)
    await expect(page.locator('input[type="checkbox"].media-checkbox')).toHaveCount(await page.locator('input[type="checkbox"].media-checkbox').count());
  });
});
